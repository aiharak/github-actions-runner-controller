package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	metaV1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// RunnerSpec defines the desired state of Runner
type RunnerSpec struct {
	// Image using by self-hosted runner
	Image string `json:"image"`
	// GitHub Repository Name to use runner
	Repository string `json:"repository"`
	// Selects a key of a GitHub Token secret in the runner's namespace
	TokenSecretKeyRef *v1.SecretKeySelector `json:"tokenSecretKeyRef"`
	Template          Template              `json:"template,omitempty"`
}

// Template defines the pod template generated by runner
type Template struct {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	metaV1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Spec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
}

// Spec defines the additional pod spec generated by runner
type Spec struct {
	// List of environment variables to set in the container.
	// Cannot be updated.
	// +optional
	// +patchMergeKey=name
	// +patchStrategy=merge
	Env []v1.EnvVar `json:"env,omitempty" patchStrategy:"merge" patchMergeKey:"name" protobuf:"bytes,7,rep,name=env"`
	// Compute Resources required by this container.
	// Cannot be updated.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	// +optional
	Resources v1.ResourceRequirements `json:"resources,omitempty" protobuf:"bytes,8,opt,name=resources"`
}

// RunnerStatus defines the observed state of Runner
type RunnerStatus struct{}

// +kubebuilder:object:root=true

// Runner is the schema for the runners API
type Runner struct {
	metaV1.TypeMeta   `json:",inline"`
	metaV1.ObjectMeta `json:"metadata,omitempty"`

	Spec   RunnerSpec   `json:"spec,omitempty"`
	Status RunnerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RunnerList contains a list of Attack
type RunnerList struct {
	metaV1.TypeMeta `json:",inline"`
	metaV1.ListMeta `json:"metadata,omitempty"`
	Items           []Runner `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Runner{}, &RunnerList{})
}
